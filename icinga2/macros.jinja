{%- macro printvalue(value) %}
  {%- if value is none -%}
    null
  {#- Booleans are lowercase in icinga #}
  {%- elif value is number -%}
    {{ value|lower() }}
  {%- elif value == "{}" or "vars" in value -%}
    {{ value }}
  {%- elif value is string -%}
    "{{ value }}"
  {%- endif %}
{%- endmacro %}

{%- macro printassign(key, value) %}
  {#- Check values like: 3, 25, 3s, 45m, 8d #}
  {%- if key in ["check_interval", "retry_interval"] %}
          {{ key }} = {{ value }}
  {#- Check string values, the more common #}
  {%- elif value is string or value is number or value is none %}
          {{ key }} = {{ printvalue(value) }}
  {#- Check dictionay values #}
  {%- elif value is mapping %}
          {{ key }} = {
    {%- for k, v in value.items() -%}
          {{ printassign(k,v)|indent(2) }}
    {%- endfor %}
          }
  {#- Check array values #}
  {%- elif value is iterable %}
          {{ key }} = [
    {%- for v in value %}
            {{ printvalue(v) }}{% if not loop.last %},{% endif %}
    {%- endfor %}
          ]
  {%- endif %}
{%- endmacro %}

{%- macro printconfig(type, object, name, config, applyto="", applymethod="")%}
  {%- if applymethod == "to" %}
        {{ type }} {{ object }} "{{ name }}" to {{ applyto }} {
  {%- elif applymethod == "for" %}
        {{ type }} {{ object }} for {{ applyto }} {
  {%- elif name in ["NodeName"] %}
        {{ type }} {{ object }} {{ name }} {
  {%- else %}
        {{ type }} {{ object }} "{{ name }}" {
  {%- endif %}
  {%- if config is defined %}
      {#- Check import first to be the first line on config blocks #}
    {%- for key, value in config.items() %}
      {%- if key == "import" %}
          {{key}} "{{ value }}"
      {% endif %}
    {%- endfor %}
    {%- for key, value in config.items() if key != "import" -%}
      {#- Handle vars values that can be a dict, list or value #}
      {%- if key == "vars"  %}
        {%- for varkey, varvalue in config.vars.items() %}
          {%- if varvalue is mapping %}
            {%- for k, v in varvalue.items() -%}
          {{ printassign("vars." + varkey + "[\"" + k + "\"]", v or "{}") }}
            {%- endfor %}
          {%- else -%}
          {{ printassign("vars." + varkey, varvalue) }}
          {%- endif %}
        {%- endfor %}
      {#- Special case for assign and ignore #}
      {%- elif key in ["assign", "ignore"] %}
        {%- for item in value %}
          {{ key }} where {{ item }}
        {%- endfor %}
      {%- elif key in ["states", "types"] %}
          {{ key }} = [ {{ value|join(", ") }} ]
      {%- else -%}
          {{ printassign(key, value) }}
      {%- endif %}
    {%- endfor %}
    {#- Add a line to aggregate variables read from dictionary #}
    {%- if applymethod == "for" %}
          vars += config
    {%- endif %}
  {%- endif %}
        }
{%- endmacro %}
